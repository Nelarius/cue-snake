#pragma once

#include "aliases.h"
#include "SDL_timer.h"

namespace nlrs
{

class clock
{
public:
    clock();
    ~clock() = default;

    void scale(float s);

    void update();

    // the time, in milliseconds, to wait for before returning
    // only waits if the previous delta time (generated by the previous call to update)
    // is smaller than the wait time
    void wait(u32 milliseconds);

    inline float delta_seconds() const
    {
        return scale_factor_ * to_seconds * delta_millis_;
    }

    float elapsed_seconds() const
    {
        return to_seconds * SDL_GetTicks();
    }

    float elapsed_minutes() const
    {
        return to_minutes * SDL_GetTicks();
    }

    float elapsed_hours() const
    {
        return to_hours * SDL_GetTicks();
    }

private:
    u32 previous_millis_;
    u32 delta_millis_;
    float scale_factor_;

    // conversion from milliseconds to various other orders of magnitude
    static constexpr float to_seconds{ 1.f / 1000.f };
    static constexpr float to_minutes{ 1.f / 60000.f };
    static constexpr float to_hours{ 1.f / 360000.f };
};

}